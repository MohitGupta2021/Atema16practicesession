
pwm0n2ndchannel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006cd  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e9  00000000  00000000  00000899  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028e  00000000  00000000  00000e82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034a  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b2  00000000  00000000  0000147e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:



int main(void)
{
	TCCR1A  |=(1<<WGM10)|(1<<WGM11);
  6c:	8f b5       	in	r24, 0x2f	; 47
  6e:	83 60       	ori	r24, 0x03	; 3
  70:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |=(1<<WGM12);
  72:	8e b5       	in	r24, 0x2e	; 46
  74:	88 60       	ori	r24, 0x08	; 8
  76:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<WGM13);
  78:	8e b5       	in	r24, 0x2e	; 46
  7a:	8f 7e       	andi	r24, 0xEF	; 239
  7c:	8e bd       	out	0x2e, r24	; 46
	
	TCCR1A |=(1<<COM1A1);
  7e:	8f b5       	in	r24, 0x2f	; 47
  80:	80 68       	ori	r24, 0x80	; 128
  82:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1<<COM1A0);
  84:	8f b5       	in	r24, 0x2f	; 47
  86:	8f 7b       	andi	r24, 0xBF	; 191
  88:	8f bd       	out	0x2f, r24	; 47
	
	TCCR1B |=(1<<CS10) |(1<<CS11);
  8a:	8e b5       	in	r24, 0x2e	; 46
  8c:	83 60       	ori	r24, 0x03	; 3
  8e:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<CS12);
  90:	8e b5       	in	r24, 0x2e	; 46
  92:	8b 7f       	andi	r24, 0xFB	; 251
  94:	8e bd       	out	0x2e, r24	; 46
	
	DDRD |=(1<<DDD5)|(1<<DDD4);
  96:	81 b3       	in	r24, 0x11	; 17
  98:	80 63       	ori	r24, 0x30	; 48
  9a:	81 bb       	out	0x11, r24	; 17
	/* Replace with your application code */
	while (1)
	{
		for(int i=0;i<1024;i++)
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0b c0       	rjmp	.+22     	; 0xb8 <main+0x4c>
		{
			
			
			OCR1B=i;
  a2:	99 bd       	out	0x29, r25	; 41
  a4:	88 bd       	out	0x28, r24	; 40
			OCR1A=i;
  a6:	9b bd       	out	0x2b, r25	; 43
  a8:	8a bd       	out	0x2a, r24	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	ef ed       	ldi	r30, 0xDF	; 223
  ac:	fe e2       	ldi	r31, 0x2E	; 46
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x42>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x48>
  b4:	00 00       	nop
	
	DDRD |=(1<<DDD5)|(1<<DDD4);
	/* Replace with your application code */
	while (1)
	{
		for(int i=0;i<1024;i++)
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	81 15       	cp	r24, r1
  ba:	f4 e0       	ldi	r31, 0x04	; 4
  bc:	9f 07       	cpc	r25, r31
  be:	8c f3       	brlt	.-30     	; 0xa2 <main+0x36>
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	83 ec       	ldi	r24, 0xC3	; 195
  c4:	99 e0       	ldi	r25, 0x09	; 9
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x5a>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x64>
  d0:	00 00       	nop
  d2:	ef ef       	ldi	r30, 0xFF	; 255
  d4:	f7 ea       	ldi	r31, 0xA7	; 167
  d6:	21 e6       	ldi	r18, 0x61	; 97
  d8:	e1 50       	subi	r30, 0x01	; 1
  da:	f0 40       	sbci	r31, 0x00	; 0
  dc:	20 40       	sbci	r18, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x6c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x76>
  e2:	00 00       	nop
  e4:	db cf       	rjmp	.-74     	; 0x9c <main+0x30>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
