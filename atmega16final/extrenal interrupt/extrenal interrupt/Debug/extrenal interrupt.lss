
extrenal interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f8  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000555  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000223  00000000  00000000  00000d29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00000f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032c  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 44 00 	jmp	0x88	; 0x88 <__vector_1>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_18>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/interrupt.h>

int main(void)

{
	DDRB|=(1<<DDB0)|(1<<DDB1);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	83 60       	ori	r24, 0x03	; 3
  70:	87 bb       	out	0x17, r24	; 23
	
	sei();
  72:	78 94       	sei
	GICR |=(1<<INT0)|(1<<INT1)|(1<<INT2);
  74:	8b b7       	in	r24, 0x3b	; 59
  76:	80 6e       	ori	r24, 0xE0	; 224
  78:	8b bf       	out	0x3b, r24	; 59
	MCUCR |=(1<<ISC11)|(1<<ISC10)|(1<<ISC01)|(1<<ISC00);
  7a:	85 b7       	in	r24, 0x35	; 53
  7c:	8f 60       	ori	r24, 0x0F	; 15
  7e:	85 bf       	out	0x35, r24	; 53
	MCUCSR|=(1<<ISC2);
  80:	84 b7       	in	r24, 0x34	; 52
  82:	80 64       	ori	r24, 0x40	; 64
  84:	84 bf       	out	0x34, r24	; 52
  86:	ff cf       	rjmp	.-2      	; 0x86 <main+0x1a>

00000088 <__vector_1>:
    /* Replace with your application code */
    while (1) 
    {
    }
}
ISR(INT0_vect){
  88:	1f 92       	push	r1
  8a:	0f 92       	push	r0
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	0f 92       	push	r0
  90:	11 24       	eor	r1, r1
  92:	8f 93       	push	r24
	PORTB |=(1<<PB0);
  94:	88 b3       	in	r24, 0x18	; 24
  96:	81 60       	ori	r24, 0x01	; 1
  98:	88 bb       	out	0x18, r24	; 24
	
	
}
  9a:	8f 91       	pop	r24
  9c:	0f 90       	pop	r0
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	0f 90       	pop	r0
  a2:	1f 90       	pop	r1
  a4:	18 95       	reti

000000a6 <__vector_2>:
ISR(INT1_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	PORTB &=(~(1<<PB0));
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	8e 7f       	andi	r24, 0xFE	; 254
  b6:	88 bb       	out	0x18, r24	; 24
}
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <__vector_18>:
ISR(INT2_vect){
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	8f 93       	push	r24
	PORTB =(1<<PB1);
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	88 bb       	out	0x18, r24	; 24
}
  d4:	8f 91       	pop	r24
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
