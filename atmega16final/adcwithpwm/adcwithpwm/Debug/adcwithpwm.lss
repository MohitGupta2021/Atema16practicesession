
adcwithpwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066a  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ca  00000000  00000000  00000822  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029f  00000000  00000000  00000dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035a  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  0000141a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001486  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
//fast 10 bit
sei();

int main(void)
{
TCCR1A |=(1<<WGM10) |(1<<WGM11);
  6c:	8f b5       	in	r24, 0x2f	; 47
  6e:	83 60       	ori	r24, 0x03	; 3
  70:	8f bd       	out	0x2f, r24	; 47
TCCR1B &=(~(1<<WGM13));
  72:	8e b5       	in	r24, 0x2e	; 46
  74:	8f 7e       	andi	r24, 0xEF	; 239
  76:	8e bd       	out	0x2e, r24	; 46
TCCR1B |=(1<<WGM12);
  78:	8e b5       	in	r24, 0x2e	; 46
  7a:	88 60       	ori	r24, 0x08	; 8
  7c:	8e bd       	out	0x2e, r24	; 46
//
//
//pwm mode
//i non inveting pwm mode

TCCR1A |=(1<<COM1A1);
  7e:	8f b5       	in	r24, 0x2f	; 47
  80:	80 68       	ori	r24, 0x80	; 128
  82:	8f bd       	out	0x2f, r24	; 47
TCCR1A &=(~(1<<COM1A0));
  84:	8f b5       	in	r24, 0x2f	; 47
  86:	8f 7b       	andi	r24, 0xBF	; 191
  88:	8f bd       	out	0x2f, r24	; 47
TCCR1A |=(1<<COM1B1);
  8a:	8f b5       	in	r24, 0x2f	; 47
  8c:	80 62       	ori	r24, 0x20	; 32
  8e:	8f bd       	out	0x2f, r24	; 47
TCCR1A &=(~(1<<COM1B0));
  90:	8f b5       	in	r24, 0x2f	; 47
  92:	8f 7e       	andi	r24, 0xEF	; 239
  94:	8f bd       	out	0x2f, r24	; 47

//prescaller set 64
TCCR1B |=(1<<CS11)|(1<<CS10);
  96:	8e b5       	in	r24, 0x2e	; 46
  98:	83 60       	ori	r24, 0x03	; 3
  9a:	8e bd       	out	0x2e, r24	; 46
TCCR1B &=(~(1<<CS12));
  9c:	8e b5       	in	r24, 0x2e	; 46
  9e:	8b 7f       	andi	r24, 0xFB	; 251
  a0:	8e bd       	out	0x2e, r24	; 46
DDRD |=(1<<DDD5)|(1<<DDD4); //for pd5 and pd4
  a2:	81 b3       	in	r24, 0x11	; 17
  a4:	80 63       	ori	r24, 0x30	; 48
  a6:	81 bb       	out	0x11, r24	; 17

//adc
//enable gei

//enable adc interrupt
ADCSRA |=(1<<ADIE);
  a8:	86 b1       	in	r24, 0x06	; 6
  aa:	88 60       	ori	r24, 0x08	; 8
  ac:	86 b9       	out	0x06, r24	; 6
//set reference to no avcc and input
//set data alingment in data register
ADMUX=0x00;
  ae:	17 b8       	out	0x07, r1	; 7
ADCSRA |=(1<<ADEN)|(1<<ADATE);
  b0:	86 b1       	in	r24, 0x06	; 6
  b2:	80 6a       	ori	r24, 0xA0	; 160
  b4:	86 b9       	out	0x06, r24	; 6
//set frequnce
ADCSRA|=(1<<ADPS2);
  b6:	86 b1       	in	r24, 0x06	; 6
  b8:	84 60       	ori	r24, 0x04	; 4
  ba:	86 b9       	out	0x06, r24	; 6
ADCSRA &=((~(1<<ADPS0))&(~(1<<ADPS1)));
  bc:	86 b1       	in	r24, 0x06	; 6
  be:	8c 7f       	andi	r24, 0xFC	; 252
  c0:	86 b9       	out	0x06, r24	; 6
//start convertion
ADCSRA |=(1<<ADSC);
  c2:	86 b1       	in	r24, 0x06	; 6
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	86 b9       	out	0x06, r24	; 6
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <main+0x5c>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
