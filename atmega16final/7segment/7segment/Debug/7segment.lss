
7segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000138  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000138  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000753  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000601  00000000  00000000  00000997  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a4  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000123c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000352  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000186  00000000  00000000  000015c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	81 bb       	out	0x11, r24	; 17
	DDRA=0xFF;
  9a:	8a bb       	out	0x1a, r24	; 26
	
	unsigned char segment[10]={0x3F,0x06,0x58,0x4F,0x66,0x6D,0x7C,0x07,0x7F,0x6F},i;
  9c:	8a e0       	ldi	r24, 0x0A	; 10
  9e:	e0 e6       	ldi	r30, 0x60	; 96
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	de 01       	movw	r26, r28
  a4:	11 96       	adiw	r26, 0x01	; 1
  a6:	01 90       	ld	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	8a 95       	dec	r24
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x24>
	
    /* Replace with your application code */
    while (1) 
    { 
		for(i=0;i<=10;i++)
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	12 c0       	rjmp	.+36     	; 0xd6 <main+0x54>
		{
		
		PORTD=segment[i];
  b2:	e1 e0       	ldi	r30, 0x01	; 1
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	ec 0f       	add	r30, r28
  b8:	fd 1f       	adc	r31, r29
  ba:	e8 0f       	add	r30, r24
  bc:	f1 1d       	adc	r31, r1
  be:	90 81       	ld	r25, Z
  c0:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	2f e3       	ldi	r18, 0x3F	; 63
  c4:	3d e0       	ldi	r19, 0x0D	; 13
  c6:	93 e0       	ldi	r25, 0x03	; 3
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	30 40       	sbci	r19, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x46>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x50>
  d2:	00 00       	nop
	unsigned char segment[10]={0x3F,0x06,0x58,0x4F,0x66,0x6D,0x7C,0x07,0x7F,0x6F},i;
	
    /* Replace with your application code */
    while (1) 
    { 
		for(i=0;i<=10;i++)
  d4:	8f 5f       	subi	r24, 0xFF	; 255
  d6:	8b 30       	cpi	r24, 0x0B	; 11
  d8:	60 f3       	brcs	.-40     	; 0xb2 <main+0x30>
		
		PORTD=segment[i];
		_delay_ms(1000);
		
    }
	PORTA=0xF9;
  da:	89 ef       	ldi	r24, 0xF9	; 249
  dc:	8b bb       	out	0x1b, r24	; 27
  de:	2f e3       	ldi	r18, 0x3F	; 63
  e0:	3d e0       	ldi	r19, 0x0D	; 13
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	30 40       	sbci	r19, 0x00	; 0
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x62>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x6c>
  ee:	00 00       	nop
	_delay_ms(1000);
	PORTA=0xE4;
  f0:	84 ee       	ldi	r24, 0xE4	; 228
  f2:	8b bb       	out	0x1b, r24	; 27
  f4:	9f e3       	ldi	r25, 0x3F	; 63
  f6:	2d e0       	ldi	r18, 0x0D	; 13
  f8:	33 e0       	ldi	r19, 0x03	; 3
  fa:	91 50       	subi	r25, 0x01	; 1
  fc:	20 40       	sbci	r18, 0x00	; 0
  fe:	30 40       	sbci	r19, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x78>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x82>
 104:	00 00       	nop
	_delay_ms(1000);
		PORTA=0xB0;
 106:	80 eb       	ldi	r24, 0xB0	; 176
 108:	8b bb       	out	0x1b, r24	; 27
 10a:	8f e3       	ldi	r24, 0x3F	; 63
 10c:	9d e0       	ldi	r25, 0x0D	; 13
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	81 50       	subi	r24, 0x01	; 1
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	20 40       	sbci	r18, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x8e>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x98>
 11a:	00 00       	nop
		_delay_ms(1000);
		PORTA=0x99;
 11c:	89 e9       	ldi	r24, 0x99	; 153
 11e:	8b bb       	out	0x1b, r24	; 27
 120:	3f e3       	ldi	r19, 0x3F	; 63
 122:	8d e0       	ldi	r24, 0x0D	; 13
 124:	93 e0       	ldi	r25, 0x03	; 3
 126:	31 50       	subi	r19, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0xa4>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0xae>
 130:	00 00       	nop
 132:	bd cf       	rjmp	.-134    	; 0xae <main+0x2c>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
