
servomotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000071d  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e9  00000000  00000000  00000901  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c8  00000000  00000000  00000eea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034e  00000000  00000000  000011d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011e  00000000  00000000  00001526  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
//set pwm mode
//fast 10 bit


int main(void)
{TCCR1A |=(1<<WGM10) |(1<<WGM11);
  6c:	8f b5       	in	r24, 0x2f	; 47
  6e:	83 60       	ori	r24, 0x03	; 3
  70:	8f bd       	out	0x2f, r24	; 47
	TCCR1B &=(~(1<<WGM13));
  72:	8e b5       	in	r24, 0x2e	; 46
  74:	8f 7e       	andi	r24, 0xEF	; 239
  76:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |=(1<<WGM12);
  78:	8e b5       	in	r24, 0x2e	; 46
  7a:	88 60       	ori	r24, 0x08	; 8
  7c:	8e bd       	out	0x2e, r24	; 46
	//
	//
	//pwm mode
	//i non inveting pwm mode

	TCCR1A |=(1<<COM1A1);
  7e:	8f b5       	in	r24, 0x2f	; 47
  80:	80 68       	ori	r24, 0x80	; 128
  82:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &=(~(1<<COM1A0));
  84:	8f b5       	in	r24, 0x2f	; 47
  86:	8f 7b       	andi	r24, 0xBF	; 191
  88:	8f bd       	out	0x2f, r24	; 47
	

	//prescaller set 64
	TCCR1B|=(1<<CS11)|(1<<CS10);
  8a:	8e b5       	in	r24, 0x2e	; 46
  8c:	83 60       	ori	r24, 0x03	; 3
  8e:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &=(~(1<<CS12));
  90:	8e b5       	in	r24, 0x2e	; 46
  92:	8b 7f       	andi	r24, 0xFB	; 251
  94:	8e bd       	out	0x2e, r24	; 46
	
	DDRD |=(1<<DDD5); //for pd5 and pd4
  96:	81 b3       	in	r24, 0x11	; 17
  98:	80 62       	ori	r24, 0x20	; 32
  9a:	81 bb       	out	0x11, r24	; 17
	



	while (1)
	{for(unsigned int i=0;i<1024;i++){
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	09 c0       	rjmp	.+18     	; 0xb4 <main+0x48>
		OCR1A=i;
  a2:	9b bd       	out	0x2b, r25	; 43
  a4:	8a bd       	out	0x2a, r24	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	e3 ef       	ldi	r30, 0xF3	; 243
  a8:	f1 e0       	ldi	r31, 0x01	; 1
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0x3e>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x44>
  b0:	00 00       	nop
	



	while (1)
	{for(unsigned int i=0;i<1024;i++){
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	81 15       	cp	r24, r1
  b6:	f4 e0       	ldi	r31, 0x04	; 4
  b8:	9f 07       	cpc	r25, r31
  ba:	98 f3       	brcs	.-26     	; 0xa2 <main+0x36>
  bc:	2f e7       	ldi	r18, 0x7F	; 127
  be:	8a e1       	ldi	r24, 0x1A	; 26
  c0:	96 e0       	ldi	r25, 0x06	; 6
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x56>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x60>
  cc:	00 00       	nop
		OCR1A=i;
		_delay_ms(2);
	}
	_delay_ms(2000);
	for(unsigned int i=1024;i>=1;i--){
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	94 e0       	ldi	r25, 0x04	; 4
  d2:	09 c0       	rjmp	.+18     	; 0xe6 <main+0x7a>
		OCR1A=i;
  d4:	9b bd       	out	0x2b, r25	; 43
  d6:	8a bd       	out	0x2a, r24	; 42
  d8:	e3 ef       	ldi	r30, 0xF3	; 243
  da:	f1 e0       	ldi	r31, 0x01	; 1
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x70>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x76>
  e2:	00 00       	nop
	{for(unsigned int i=0;i<1024;i++){
		OCR1A=i;
		_delay_ms(2);
	}
	_delay_ms(2000);
	for(unsigned int i=1024;i>=1;i--){
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	00 97       	sbiw	r24, 0x00	; 0
  e8:	a9 f7       	brne	.-22     	; 0xd4 <main+0x68>
  ea:	ff e7       	ldi	r31, 0x7F	; 127
  ec:	2a e1       	ldi	r18, 0x1A	; 26
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	f1 50       	subi	r31, 0x01	; 1
  f2:	20 40       	sbci	r18, 0x00	; 0
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x84>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x8e>
  fa:	00 00       	nop
  fc:	cf cf       	rjmp	.-98     	; 0x9c <main+0x30>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
