
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000019e  00000212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000839  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000658  00000000  00000000  00000af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000372  00000000  00000000  00001151  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000014c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000350  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000293  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001b0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b1 00 	call	0x162	; 0x162 <main>
  7a:	0c 94 cd 00 	jmp	0x19a	; 0x19a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd>:
}
void lcd_cmd(unsigned char com)
{
	//for command rs=0,rw=0,en=1,en=0
	char cmd1;
	cmd1=(com&(0xF0));//upper 4 bit data
  82:	98 2f       	mov	r25, r24
  84:	90 7f       	andi	r25, 0xF0	; 240
	lcd=cmd1;
  86:	95 bb       	out	0x15, r25	; 21
	lcd&=~(1<<rs);//rs=0
  88:	95 b3       	in	r25, 0x15	; 21
  8a:	9e 7f       	andi	r25, 0xFE	; 254
  8c:	95 bb       	out	0x15, r25	; 21
	lcd&=~(1<<rw);//rw=0
  8e:	95 b3       	in	r25, 0x15	; 21
  90:	9d 7f       	andi	r25, 0xFD	; 253
  92:	95 bb       	out	0x15, r25	; 21
	lcd|=(1<<en);//en=1
  94:	95 b3       	in	r25, 0x15	; 21
  96:	94 60       	ori	r25, 0x04	; 4
  98:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	e9 ef       	ldi	r30, 0xF9	; 249
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcd_cmd+0x1c>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <lcd_cmd+0x22>
  a4:	00 00       	nop
	_delay_ms(1);
	lcd&=~(1<<en);
  a6:	95 b3       	in	r25, 0x15	; 21
  a8:	9b 7f       	andi	r25, 0xFB	; 251
  aa:	95 bb       	out	0x15, r25	; 21


	cmd1=((com<<4)&(0xF0));//upper 4 bit data
  ac:	f0 e1       	ldi	r31, 0x10	; 16
  ae:	8f 9f       	mul	r24, r31
  b0:	c0 01       	movw	r24, r0
  b2:	11 24       	eor	r1, r1
	lcd=cmd1;
  b4:	85 bb       	out	0x15, r24	; 21
	lcd&=~(1<<rs);//rs=0
  b6:	85 b3       	in	r24, 0x15	; 21
  b8:	8e 7f       	andi	r24, 0xFE	; 254
  ba:	85 bb       	out	0x15, r24	; 21
	lcd&=~(1<<rw);//rw=0
  bc:	85 b3       	in	r24, 0x15	; 21
  be:	8d 7f       	andi	r24, 0xFD	; 253
  c0:	85 bb       	out	0x15, r24	; 21
	lcd|=(1<<en);//en=1
  c2:	85 b3       	in	r24, 0x15	; 21
  c4:	84 60       	ori	r24, 0x04	; 4
  c6:	85 bb       	out	0x15, r24	; 21
  c8:	89 ef       	ldi	r24, 0xF9	; 249
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_cmd+0x4a>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcd_cmd+0x50>
  d2:	00 00       	nop
	_delay_ms(1);
	lcd&=~(1<<en);
  d4:	85 b3       	in	r24, 0x15	; 21
  d6:	8b 7f       	andi	r24, 0xFB	; 251
  d8:	85 bb       	out	0x15, r24	; 21
  da:	08 95       	ret

000000dc <lcd_data>:
}
void lcd_data(unsigned char data)
{
	unsigned char data1;
	data1=(data&(0xF0));// upper 4 bit
  dc:	98 2f       	mov	r25, r24
  de:	90 7f       	andi	r25, 0xF0	; 240
	lcd=data1;
  e0:	95 bb       	out	0x15, r25	; 21
	lcd|=(1<<rs); //rs=1
  e2:	95 b3       	in	r25, 0x15	; 21
  e4:	91 60       	ori	r25, 0x01	; 1
  e6:	95 bb       	out	0x15, r25	; 21
	lcd&=~(1<<rw);//rw=0
  e8:	95 b3       	in	r25, 0x15	; 21
  ea:	9d 7f       	andi	r25, 0xFD	; 253
  ec:	95 bb       	out	0x15, r25	; 21
	lcd|=(1<<en);//en=1
  ee:	95 b3       	in	r25, 0x15	; 21
  f0:	94 60       	ori	r25, 0x04	; 4
  f2:	95 bb       	out	0x15, r25	; 21
  f4:	e9 ef       	ldi	r30, 0xF9	; 249
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_data+0x1c>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <lcd_data+0x22>
  fe:	00 00       	nop
	
	_delay_ms(1);
	lcd&=~(1<<en);//en=0
 100:	95 b3       	in	r25, 0x15	; 21
 102:	9b 7f       	andi	r25, 0xFB	; 251
 104:	95 bb       	out	0x15, r25	; 21

	data1=((data<<4)&(0xF0));//lower 4 bit data
 106:	f0 e1       	ldi	r31, 0x10	; 16
 108:	8f 9f       	mul	r24, r31
 10a:	c0 01       	movw	r24, r0
 10c:	11 24       	eor	r1, r1
	lcd=data1;
 10e:	85 bb       	out	0x15, r24	; 21
	lcd|=(1<<rs);//rs=1
 110:	85 b3       	in	r24, 0x15	; 21
 112:	81 60       	ori	r24, 0x01	; 1
 114:	85 bb       	out	0x15, r24	; 21
	lcd&=~(1<<rw);//rw=0
 116:	85 b3       	in	r24, 0x15	; 21
 118:	8d 7f       	andi	r24, 0xFD	; 253
 11a:	85 bb       	out	0x15, r24	; 21
	lcd|=(1<<en);//en=1
 11c:	85 b3       	in	r24, 0x15	; 21
 11e:	84 60       	ori	r24, 0x04	; 4
 120:	85 bb       	out	0x15, r24	; 21
 122:	89 ef       	ldi	r24, 0xF9	; 249
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_data+0x4a>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_data+0x50>
 12c:	00 00       	nop
	_delay_ms(1);
	lcd&=~(1<<en);
 12e:	85 b3       	in	r24, 0x15	; 21
 130:	8b 7f       	andi	r24, 0xFB	; 251
 132:	85 bb       	out	0x15, r24	; 21
 134:	08 95       	ret

00000136 <lcd_string>:

}
//--------------------------------------------------------------
void lcd_string(unsigned char *str)
{
 136:	0f 93       	push	r16
 138:	1f 93       	push	r17
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	8c 01       	movw	r16, r24
	int i=0;
 140:	c0 e0       	ldi	r28, 0x00	; 0
 142:	d0 e0       	ldi	r29, 0x00	; 0
	while(str[i]!='\0')
 144:	03 c0       	rjmp	.+6      	; 0x14c <lcd_string+0x16>
	{
		lcd_data(str[i]);
 146:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_data>
		i++;
 14a:	21 96       	adiw	r28, 0x01	; 1
}
//--------------------------------------------------------------
void lcd_string(unsigned char *str)
{
	int i=0;
	while(str[i]!='\0')
 14c:	f8 01       	movw	r30, r16
 14e:	ec 0f       	add	r30, r28
 150:	fd 1f       	adc	r31, r29
 152:	80 81       	ld	r24, Z
 154:	81 11       	cpse	r24, r1
 156:	f7 cf       	rjmp	.-18     	; 0x146 <lcd_string+0x10>
	{
		lcd_data(str[i]);
		i++;
	}
}
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	1f 91       	pop	r17
 15e:	0f 91       	pop	r16
 160:	08 95       	ret

00000162 <main>:
void lcd_string(unsigned char *str);
//------------------------------------------------------------------------

void main()
{
	DDRC=0xFF;
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	84 bb       	out	0x14, r24	; 20
	
	lcd_cmd(0x02);//home location
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x28);//2x16 lcd 4bit mode
 16c:	88 e2       	ldi	r24, 0x28	; 40
 16e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x0C);//dispy on cursor blink
 172:	8c e0       	ldi	r24, 0x0C	; 12
 174:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x06);//increament
 178:	86 e0       	ldi	r24, 0x06	; 6
 17a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>

	
	while(1)
	{
		lcd_cmd(0x80);
 17e:	80 e8       	ldi	r24, 0x80	; 128
 180:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
		lcd_data('I');
 184:	89 e4       	ldi	r24, 0x49	; 73
 186:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_data>
		lcd_cmd(0xc0);
 18a:	80 ec       	ldi	r24, 0xC0	; 192
 18c:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
		lcd_string("praveen ");
 190:	80 e6       	ldi	r24, 0x60	; 96
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_string>
 198:	f2 cf       	rjmp	.-28     	; 0x17e <main+0x1c>

0000019a <_exit>:
 19a:	f8 94       	cli

0000019c <__stop_program>:
 19c:	ff cf       	rjmp	.-2      	; 0x19c <__stop_program>
