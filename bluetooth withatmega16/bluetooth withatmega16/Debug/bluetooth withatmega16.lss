
bluetooth withatmega16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000150  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000606  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000576  00000000  00000000  000007ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000020f  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000f70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000323  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000012d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001313  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
uint8_t data=0,rfid[15];

int main()
{
	// ENABLE THE GLOBAL INTERRUPT ENABLE BIT
	sei();
  7c:	78 94       	sei
	
	// ENABLE THE TRANSMISSION & RECEPTION IN USART
	UCSRB |= (1<<TXEN) | (1<<RXEN) | (1<<RXCIE);
  7e:	8a b1       	in	r24, 0x0a	; 10
  80:	88 69       	ori	r24, 0x98	; 152
  82:	8a b9       	out	0x0a, r24	; 10
	
	// SET DATA SIZE FOR COMMUNICATION
	UCSRC |= (1<<UCSZ0) | (1<<UCSZ1);
  84:	80 b5       	in	r24, 0x20	; 32
  86:	86 60       	ori	r24, 0x06	; 6
  88:	80 bd       	out	0x20, r24	; 32
	// SET THE BAUD RATE
	UCSRA |= (1<<U2X);
  8a:	8b b1       	in	r24, 0x0b	; 11
  8c:	82 60       	ori	r24, 0x02	; 2
  8e:	8b b9       	out	0x0b, r24	; 11
	UBRRL = 207;
  90:	8f ec       	ldi	r24, 0xCF	; 207
  92:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0;
  94:	10 bc       	out	0x20, r1	; 32
	DDRB |= (1<<DDB0);
  96:	87 b3       	in	r24, 0x17	; 23
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	87 bb       	out	0x17, r24	; 23

	while(1)
	{
		if(data == 'a')
  9c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a0:	81 36       	cpi	r24, 0x61	; 97
  a2:	19 f4       	brne	.+6      	; 0xaa <main+0x2e>
		{
			PORTB |= (1<<PB0);
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	88 bb       	out	0x18, r24	; 24
		}
		if(data == 'b')
  aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ae:	82 36       	cpi	r24, 0x62	; 98
  b0:	a9 f7       	brne	.-22     	; 0x9c <main+0x20>
		{
			PORTB &= ~(1<<PB0);
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	8e 7f       	andi	r24, 0xFE	; 254
  b6:	88 bb       	out	0x18, r24	; 24
  b8:	f1 cf       	rjmp	.-30     	; 0x9c <main+0x20>

000000ba <__vector_11>:
}


// IMPLEMENT THE INTERRUPT HANDLER
ISR(USART_RXC_vect)
{
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
	data= UDR;
  c6:	8c b1       	in	r24, 0x0c	; 12
  c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	
}
  cc:	8f 91       	pop	r24
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
