
lcdwithatmega16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000014c  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f3  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065b  00000000  00000000  00000a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000327  00000000  00000000  000010c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000013f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037a  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b4  00000000  00000000  000017e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001996  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  7a:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_data>:

#include <avr/io.h>
#include <util/delay.h>
void lcd_data(unsigned char data)
{
	PORTD =data;
  82:	82 bb       	out	0x12, r24	; 18
	PORTB |=(1<<PB0);//rs=1
  84:	88 b3       	in	r24, 0x18	; 24
  86:	81 60       	ori	r24, 0x01	; 1
  88:	88 bb       	out	0x18, r24	; 24
	PORTB &= (~(1<<PB1));//rw=0
  8a:	88 b3       	in	r24, 0x18	; 24
  8c:	8d 7f       	andi	r24, 0xFD	; 253
  8e:	88 bb       	out	0x18, r24	; 24
	PORTB |=(1<<PB2);//en=1
  90:	88 b3       	in	r24, 0x18	; 24
  92:	84 60       	ori	r24, 0x04	; 4
  94:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	8f e3       	ldi	r24, 0x3F	; 63
  98:	9c e9       	ldi	r25, 0x9C	; 156
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <lcd_data+0x18>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <lcd_data+0x1e>
  a0:	00 00       	nop
	_delay_ms(10);
	PORTB &=(~(1<<PB2));
  a2:	88 b3       	in	r24, 0x18	; 24
  a4:	8b 7f       	andi	r24, 0xFB	; 251
  a6:	88 bb       	out	0x18, r24	; 24
  a8:	08 95       	ret

000000aa <lcd_cmd>:
}
 void lcd_cmd(unsigned char command)
 {
	 PORTD=command;
  aa:	82 bb       	out	0x12, r24	; 18
	 PORTB &=(~(1<<PB0));//rs=0
  ac:	88 b3       	in	r24, 0x18	; 24
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	88 bb       	out	0x18, r24	; 24
	 PORTB &=(~(1<<PB1));//rw=0
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	8d 7f       	andi	r24, 0xFD	; 253
  b6:	88 bb       	out	0x18, r24	; 24
	 PORTB |=(1<<PB2);//en=1
  b8:	88 b3       	in	r24, 0x18	; 24
  ba:	84 60       	ori	r24, 0x04	; 4
  bc:	88 bb       	out	0x18, r24	; 24
  be:	8f e3       	ldi	r24, 0x3F	; 63
  c0:	9c e9       	ldi	r25, 0x9C	; 156
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_cmd+0x18>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_cmd+0x1e>
  c8:	00 00       	nop
	 _delay_ms(10);//10ms
	 PORTB &=(~(1<<PB2));//en=0
  ca:	88 b3       	in	r24, 0x18	; 24
  cc:	8b 7f       	andi	r24, 0xFB	; 251
  ce:	88 bb       	out	0x18, r24	; 24
  d0:	08 95       	ret

000000d2 <lcd_string>:
 }
	void lcd_string(const unsigned char *str,unsigned char length)
	 {
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	8c 01       	movw	r16, r24
  dc:	d6 2f       	mov	r29, r22
		 
		 char i=0;
		 for(i=0;i<length;i++)
  de:	c0 e0       	ldi	r28, 0x00	; 0
  e0:	07 c0       	rjmp	.+14     	; 0xf0 <lcd_string+0x1e>
		 {
			 lcd_data(str[i]);
  e2:	f8 01       	movw	r30, r16
  e4:	ec 0f       	add	r30, r28
  e6:	f1 1d       	adc	r31, r1
  e8:	80 81       	ld	r24, Z
  ea:	0e 94 41 00 	call	0x82	; 0x82 <lcd_data>
 }
	void lcd_string(const unsigned char *str,unsigned char length)
	 {
		 
		 char i=0;
		 for(i=0;i<length;i++)
  ee:	cf 5f       	subi	r28, 0xFF	; 255
  f0:	cd 17       	cp	r28, r29
  f2:	b8 f3       	brcs	.-18     	; 0xe2 <lcd_string+0x10>
			 lcd_data(str[i]);
	 }
	
	
	
}
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	1f 91       	pop	r17
  fa:	0f 91       	pop	r16
  fc:	08 95       	ret

000000fe <lcd_intialize>:
void lcd_intialize()
{
	
	lcd_cmd(0x38);
  fe:	88 e3       	ldi	r24, 0x38	; 56
 100:	0e 94 55 00 	call	0xaa	; 0xaa <lcd_cmd>
	lcd_cmd(0x06);
 104:	86 e0       	ldi	r24, 0x06	; 6
 106:	0e 94 55 00 	call	0xaa	; 0xaa <lcd_cmd>
	lcd_cmd(0x0C);
 10a:	8c e0       	ldi	r24, 0x0C	; 12
 10c:	0e 94 55 00 	call	0xaa	; 0xaa <lcd_cmd>
	lcd_cmd(0x01);
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	0e 94 55 00 	call	0xaa	; 0xaa <lcd_cmd>
 116:	08 95       	ret

00000118 <main>:
}

int main(void){
	DDRD=0xFF;//port d as o/p
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	81 bb       	out	0x11, r24	; 17
	DDRB |=(1<<DDB0) |(1<<DDB1) | (1<<DDB2);
 11c:	87 b3       	in	r24, 0x17	; 23
 11e:	87 60       	ori	r24, 0x07	; 7
 120:	87 bb       	out	0x17, r24	; 23
	lcd_intialize();
 122:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_intialize>
	while(1)
	{
		
		lcd_cmd(0x80);
 126:	80 e8       	ldi	r24, 0x80	; 128
 128:	0e 94 55 00 	call	0xaa	; 0xaa <lcd_cmd>
		lcd_string("hello",5);
 12c:	65 e0       	ldi	r22, 0x05	; 5
 12e:	80 e6       	ldi	r24, 0x60	; 96
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_string>
		lcd_cmd(0xC0);
 136:	80 ec       	ldi	r24, 0xC0	; 192
 138:	0e 94 55 00 	call	0xaa	; 0xaa <lcd_cmd>
		lcd_string("world",7);
 13c:	67 e0       	ldi	r22, 0x07	; 7
 13e:	86 e6       	ldi	r24, 0x66	; 102
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_string>
 146:	ef cf       	rjmp	.-34     	; 0x126 <main+0xe>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
