
gsm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000264  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00000264  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000be7  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000696  00000000  00000000  00000f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042d  00000000  00000000  00001625  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001a54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037e  00000000  00000000  00001acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002c1  00000000  00000000  00001e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000210b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e6       	ldi	r30, 0x64	; 100
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  7a:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <USARTInit>:
	 while(!(UCSRA & (1<<RXC)));



	 return UDR;
 }
  82:	89 b9       	out	0x09, r24	; 9
  84:	90 bd       	out	0x20, r25	; 32
  86:	80 b5       	in	r24, 0x20	; 32
  88:	86 68       	ori	r24, 0x86	; 134
  8a:	80 bd       	out	0x20, r24	; 32
  8c:	88 e1       	ldi	r24, 0x18	; 24
  8e:	8a b9       	out	0x0a, r24	; 10
  90:	08 95       	ret

00000092 <USARTWriteChar>:

 void USARTWriteChar(char data)
 {

	 while(!(UCSRA & (1<<UDRE)));
  92:	5d 9b       	sbis	0x0b, 5	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <USARTWriteChar>
	 UDR=data;
  96:	8c b9       	out	0x0c, r24	; 12
  98:	08 95       	ret

0000009a <USART_StringTransmit>:
 }
 void USART_StringTransmit(unsigned char s[])
 {
  9a:	0f 93       	push	r16
  9c:	1f 93       	push	r17
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	8c 01       	movw	r16, r24
	 int i=0;
  a4:	c0 e0       	ldi	r28, 0x00	; 0
  a6:	d0 e0       	ldi	r29, 0x00	; 0
	 while(s[i]!='\0')
  a8:	03 c0       	rjmp	.+6      	; 0xb0 <USART_StringTransmit+0x16>
	 {
		 USARTWriteChar(s[i]);
  aa:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
		 i++;
  ae:	21 96       	adiw	r28, 0x01	; 1
	 UDR=data;
 }
 void USART_StringTransmit(unsigned char s[])
 {
	 int i=0;
	 while(s[i]!='\0')
  b0:	f8 01       	movw	r30, r16
  b2:	ec 0f       	add	r30, r28
  b4:	fd 1f       	adc	r31, r29
  b6:	80 81       	ld	r24, Z
  b8:	81 11       	cpse	r24, r1
  ba:	f7 cf       	rjmp	.-18     	; 0xaa <USART_StringTransmit+0x10>
	 {
		 USARTWriteChar(s[i]);
		 i++;
	 }
 }
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	1f 91       	pop	r17
  c2:	0f 91       	pop	r16
  c4:	08 95       	ret

000000c6 <main>:

 void main()
 {
	 DDRB=255;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	87 bb       	out	0x17, r24	; 23

	 unsigned char data;
	 PORTB=0b01010101;
  ca:	85 e5       	ldi	r24, 0x55	; 85
  cc:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f e3       	ldi	r18, 0x3F	; 63
  d0:	8d e0       	ldi	r24, 0x0D	; 13
  d2:	93 e0       	ldi	r25, 0x03	; 3
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0xe>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x18>
  de:	00 00       	nop

	 _delay_ms(1000);
	 USARTInit(51);
  e0:	83 e3       	ldi	r24, 0x33	; 51
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 41 00 	call	0x82	; 0x82 <USARTInit>
  e8:	2f e7       	ldi	r18, 0x7F	; 127
  ea:	8f e4       	ldi	r24, 0x4F	; 79
  ec:	92 e1       	ldi	r25, 0x12	; 18
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x28>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x32>
  f8:	00 00       	nop
	 _delay_ms(6000);

	 while(1)
	 {
		 int c=PINA&0b00000001;
  fa:	c9 b3       	in	r28, 0x19	; 25
		 USARTWriteChar('A');
  fc:	81 e4       	ldi	r24, 0x41	; 65
  fe:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
 102:	87 ea       	ldi	r24, 0xA7	; 167
 104:	91 e6       	ldi	r25, 0x61	; 97
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x40>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x46>
 10c:	00 00       	nop
		 _delay_ms(100);
		 USARTWriteChar('T');
 10e:	84 e5       	ldi	r24, 0x54	; 84
 110:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
 114:	9f e9       	ldi	r25, 0x9F	; 159
 116:	26 e8       	ldi	r18, 0x86	; 134
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	91 50       	subi	r25, 0x01	; 1
 11c:	20 40       	sbci	r18, 0x00	; 0
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x54>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x5e>
 124:	00 00       	nop
		 _delay_ms(500);
		 USARTWriteChar('\n\r');
 126:	8d e0       	ldi	r24, 0x0D	; 13
 128:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
 12c:	9f e9       	ldi	r25, 0x9F	; 159
 12e:	26 e8       	ldi	r18, 0x86	; 134
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	91 50       	subi	r25, 0x01	; 1
 134:	20 40       	sbci	r18, 0x00	; 0
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x6c>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x76>
 13c:	00 00       	nop
		 
		 _delay_ms(500);

		 USARTWriteChar('A');
 13e:	81 e4       	ldi	r24, 0x41	; 65
 140:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
		 USARTWriteChar('T');
 144:	84 e5       	ldi	r24, 0x54	; 84
 146:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
		 USARTWriteChar('+');
 14a:	8b e2       	ldi	r24, 0x2B	; 43
 14c:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
		 USARTWriteChar('C');
 150:	83 e4       	ldi	r24, 0x43	; 67
 152:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
		 USARTWriteChar('M');
 156:	8d e4       	ldi	r24, 0x4D	; 77
 158:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
		 USARTWriteChar('G');
 15c:	87 e4       	ldi	r24, 0x47	; 71
 15e:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
		 USARTWriteChar('F');
 162:	86 e4       	ldi	r24, 0x46	; 70
 164:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
		 USARTWriteChar('=');
 168:	8d e3       	ldi	r24, 0x3D	; 61
 16a:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
		 USARTWriteChar('1');
 16e:	81 e3       	ldi	r24, 0x31	; 49
 170:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
		 USARTWriteChar('\n\r');
 174:	8d e0       	ldi	r24, 0x0D	; 13
 176:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
 17a:	9f e7       	ldi	r25, 0x7F	; 127
 17c:	2a e1       	ldi	r18, 0x1A	; 26
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	91 50       	subi	r25, 0x01	; 1
 182:	20 40       	sbci	r18, 0x00	; 0
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0xba>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0xc4>
 18a:	00 00       	nop


		 _delay_ms(2000);


		 if(c==0b00000001)
 18c:	c0 ff       	sbrs	r28, 0
 18e:	b5 cf       	rjmp	.-150    	; 0xfa <main+0x34>
		 {
			 PORTB=~PORTB;
 190:	88 b3       	in	r24, 0x18	; 24
 192:	80 95       	com	r24
 194:	88 bb       	out	0x18, r24	; 24
 196:	9f e3       	ldi	r25, 0x3F	; 63
 198:	2d e0       	ldi	r18, 0x0D	; 13
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	91 50       	subi	r25, 0x01	; 1
 19e:	20 40       	sbci	r18, 0x00	; 0
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0xd6>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0xe0>
 1a6:	00 00       	nop
			 _delay_ms(1000);

			 USARTWriteChar('A');
 1a8:	81 e4       	ldi	r24, 0x41	; 65
 1aa:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
			 USARTWriteChar('T');
 1ae:	84 e5       	ldi	r24, 0x54	; 84
 1b0:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
			 USARTWriteChar('+');
 1b4:	8b e2       	ldi	r24, 0x2B	; 43
 1b6:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
			 USARTWriteChar('C');
 1ba:	83 e4       	ldi	r24, 0x43	; 67
 1bc:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
			 USARTWriteChar('M');
 1c0:	8d e4       	ldi	r24, 0x4D	; 77
 1c2:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
			 USARTWriteChar('G');
 1c6:	87 e4       	ldi	r24, 0x47	; 71
 1c8:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
			 USARTWriteChar('S');
 1cc:	83 e5       	ldi	r24, 0x53	; 83
 1ce:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
			 USARTWriteChar('=');
 1d2:	8d e3       	ldi	r24, 0x3D	; 61
 1d4:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
			 USARTWriteChar('"');
 1d8:	82 e2       	ldi	r24, 0x22	; 34
 1da:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
			 USARTWriteChar('+');
 1de:	8b e2       	ldi	r24, 0x2B	; 43
 1e0:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
			 USARTWriteChar('9');
 1e4:	89 e3       	ldi	r24, 0x39	; 57
 1e6:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
			 USARTWriteChar('1');
 1ea:	81 e3       	ldi	r24, 0x31	; 49
 1ec:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
			 USARTWriteChar('9');
 1f0:	89 e3       	ldi	r24, 0x39	; 57
 1f2:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
			 USARTWriteChar('7');
 1f6:	87 e3       	ldi	r24, 0x37	; 55
 1f8:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
			 USARTWriteChar('1');
 1fc:	81 e3       	ldi	r24, 0x31	; 49
 1fe:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
			 USARTWriteChar('6');
 202:	86 e3       	ldi	r24, 0x36	; 54
 204:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
			 USARTWriteChar('8');
 208:	88 e3       	ldi	r24, 0x38	; 56
 20a:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
			 USARTWriteChar('1');
 20e:	81 e3       	ldi	r24, 0x31	; 49
 210:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
			 USARTWriteChar('7');
 214:	87 e3       	ldi	r24, 0x37	; 55
 216:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
			 USARTWriteChar('7');
 21a:	87 e3       	ldi	r24, 0x37	; 55
 21c:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
			 USARTWriteChar('1');
 220:	81 e3       	ldi	r24, 0x31	; 49
 222:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
			 USARTWriteChar('0');
 226:	80 e3       	ldi	r24, 0x30	; 48
 228:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
			 USARTWriteChar('"');
 22c:	82 e2       	ldi	r24, 0x22	; 34
 22e:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
			 USARTWriteChar('\n\r');
 232:	8d e0       	ldi	r24, 0x0D	; 13
 234:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
 238:	9f e3       	ldi	r25, 0x3F	; 63
 23a:	2d e0       	ldi	r18, 0x0D	; 13
 23c:	83 e0       	ldi	r24, 0x03	; 3
 23e:	91 50       	subi	r25, 0x01	; 1
 240:	20 40       	sbci	r18, 0x00	; 0
 242:	80 40       	sbci	r24, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
 246:	00 c0       	rjmp	.+0      	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
 248:	00 00       	nop
			 _delay_ms(1000);
			 USART_StringTransmit(" Alert! Motion has been detected   ");
 24a:	80 e6       	ldi	r24, 0x60	; 96
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 4d 00 	call	0x9a	; 0x9a <USART_StringTransmit>
			 USARTWriteChar(26);
 252:	8a e1       	ldi	r24, 0x1A	; 26
 254:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
			 USARTWriteChar('\n\r');
 258:	8d e0       	ldi	r24, 0x0D	; 13
 25a:	0e 94 49 00 	call	0x92	; 0x92 <USARTWriteChar>
 25e:	4d cf       	rjmp	.-358    	; 0xfa <main+0x34>

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
