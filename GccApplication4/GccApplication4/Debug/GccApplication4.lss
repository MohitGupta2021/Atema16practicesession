
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000234  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000234  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800072  00800072  000002da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000094a  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a1  00000000  00000000  00000cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e2  00000000  00000000  00001373  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001758  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a1  00000000  00000000  000017d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036b  00000000  00000000  00001b71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001edc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 de 00 	call	0x1bc	; 0x1bc <main>
  8a:	0c 94 18 01 	jmp	0x230	; 0x230 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
		
	}
	
	
ISR(INT0_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	
	if(echo_pin==1)
  a0:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
  a4:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	69 f4       	brne	.+26     	; 0xc6 <__vector_1+0x34>
	{
		
		TCCR1B=0;
  ac:	1e bc       	out	0x2e, r1	; 46
		pulse=TCNT1;
  ae:	8c b5       	in	r24, 0x2c	; 44
  b0:	9d b5       	in	r25, 0x2d	; 45
  b2:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <pulse+0x1>
  b6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <pulse>
		TCNT1=0;
  ba:	1d bc       	out	0x2d, r1	; 45
  bc:	1c bc       	out	0x2c, r1	; 44
		echo_pin=0;
  be:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
  c2:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
	}
	if(echo_pin==0)
  c6:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
  ca:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
  ce:	89 2b       	or	r24, r25
  d0:	49 f4       	brne	.+18     	; 0xe4 <__vector_1+0x52>
	{
		
		TCCR1B|=(1<<CS10);
  d2:	8e b5       	in	r24, 0x2e	; 46
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	8e bd       	out	0x2e, r24	; 46
		echo_pin=1;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <__data_end+0x1>
  e0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
		
	}
}
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <lcd_cmd>:


void lcd_cmd(unsigned char com)
{
	char cmd1;
	cmd1=(com&(0xF0));
  f2:	98 2f       	mov	r25, r24
  f4:	90 7f       	andi	r25, 0xF0	; 240
	lcd=cmd1;
  f6:	98 bb       	out	0x18, r25	; 24
	lcd&=~(1<<rs);
  f8:	98 b3       	in	r25, 0x18	; 24
  fa:	9e 7f       	andi	r25, 0xFE	; 254
  fc:	98 bb       	out	0x18, r25	; 24
	lcd&=~(1<<rw);
  fe:	98 b3       	in	r25, 0x18	; 24
 100:	9d 7f       	andi	r25, 0xFD	; 253
 102:	98 bb       	out	0x18, r25	; 24
	lcd|=(1<<en);
 104:	98 b3       	in	r25, 0x18	; 24
 106:	94 60       	ori	r25, 0x04	; 4
 108:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	e9 ef       	ldi	r30, 0xF9	; 249
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <lcd_cmd+0x1c>
 112:	00 c0       	rjmp	.+0      	; 0x114 <lcd_cmd+0x22>
 114:	00 00       	nop
	_delay_ms(1);
	lcd&=~(1<<en);
 116:	98 b3       	in	r25, 0x18	; 24
 118:	9b 7f       	andi	r25, 0xFB	; 251
 11a:	98 bb       	out	0x18, r25	; 24
	
	cmd1=((com<<4)&(0xF0));
 11c:	f0 e1       	ldi	r31, 0x10	; 16
 11e:	8f 9f       	mul	r24, r31
 120:	c0 01       	movw	r24, r0
 122:	11 24       	eor	r1, r1
	lcd=cmd1;
 124:	88 bb       	out	0x18, r24	; 24
	lcd&=~(1<<rs);
 126:	88 b3       	in	r24, 0x18	; 24
 128:	8e 7f       	andi	r24, 0xFE	; 254
 12a:	88 bb       	out	0x18, r24	; 24
	lcd&=~(1<<rw);
 12c:	88 b3       	in	r24, 0x18	; 24
 12e:	8d 7f       	andi	r24, 0xFD	; 253
 130:	88 bb       	out	0x18, r24	; 24
	lcd|=(1<<en);
 132:	88 b3       	in	r24, 0x18	; 24
 134:	84 60       	ori	r24, 0x04	; 4
 136:	88 bb       	out	0x18, r24	; 24
 138:	89 ef       	ldi	r24, 0xF9	; 249
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_cmd+0x4a>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_cmd+0x50>
 142:	00 00       	nop
	_delay_ms(1);
	lcd&=~(1<<en);
 144:	88 b3       	in	r24, 0x18	; 24
 146:	8b 7f       	andi	r24, 0xFB	; 251
 148:	88 bb       	out	0x18, r24	; 24
 14a:	08 95       	ret

0000014c <lcd_data>:
}
void lcd_data(unsigned char data)
{
	unsigned char data1;
	data1=(data&(0xF0));
 14c:	98 2f       	mov	r25, r24
 14e:	90 7f       	andi	r25, 0xF0	; 240
	lcd=data1;
 150:	98 bb       	out	0x18, r25	; 24
	lcd|=(1<<rs);
 152:	98 b3       	in	r25, 0x18	; 24
 154:	91 60       	ori	r25, 0x01	; 1
 156:	98 bb       	out	0x18, r25	; 24
	lcd&=~(1<<rw);
 158:	98 b3       	in	r25, 0x18	; 24
 15a:	9d 7f       	andi	r25, 0xFD	; 253
 15c:	98 bb       	out	0x18, r25	; 24
	lcd|=(1<<en);
 15e:	98 b3       	in	r25, 0x18	; 24
 160:	94 60       	ori	r25, 0x04	; 4
 162:	98 bb       	out	0x18, r25	; 24
 164:	e9 ef       	ldi	r30, 0xF9	; 249
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <lcd_data+0x1c>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <lcd_data+0x22>
 16e:	00 00       	nop
	_delay_ms(1);
	lcd&=~(1<<en);
 170:	98 b3       	in	r25, 0x18	; 24
 172:	9b 7f       	andi	r25, 0xFB	; 251
 174:	98 bb       	out	0x18, r25	; 24
	
	data1=((data<<4)&(0xF0));
 176:	f0 e1       	ldi	r31, 0x10	; 16
 178:	8f 9f       	mul	r24, r31
 17a:	c0 01       	movw	r24, r0
 17c:	11 24       	eor	r1, r1
	lcd=data1;
 17e:	88 bb       	out	0x18, r24	; 24
	lcd|=(1<<rs);
 180:	88 b3       	in	r24, 0x18	; 24
 182:	81 60       	ori	r24, 0x01	; 1
 184:	88 bb       	out	0x18, r24	; 24
	lcd&=~(1<<rw);
 186:	88 b3       	in	r24, 0x18	; 24
 188:	8d 7f       	andi	r24, 0xFD	; 253
 18a:	88 bb       	out	0x18, r24	; 24
	lcd|=(1<<en);
 18c:	88 b3       	in	r24, 0x18	; 24
 18e:	84 60       	ori	r24, 0x04	; 4
 190:	88 bb       	out	0x18, r24	; 24
 192:	89 ef       	ldi	r24, 0xF9	; 249
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <lcd_data+0x4a>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <lcd_data+0x50>
 19c:	00 00       	nop
	_delay_ms(1);
	lcd&=~(1<<en);
 19e:	88 b3       	in	r24, 0x18	; 24
 1a0:	8b 7f       	andi	r24, 0xFB	; 251
 1a2:	88 bb       	out	0x18, r24	; 24
 1a4:	08 95       	ret

000001a6 <lcd_string>:
	
}
void lcd_string(unsigned char *str)
{
 1a6:	8c 01       	movw	r16, r24
	int i=0;
 1a8:	c0 e0       	ldi	r28, 0x00	; 0
 1aa:	d0 e0       	ldi	r29, 0x00	; 0
	while(str[i]!='/0')
	{
		
		lcd_data(str[i]);
 1ac:	f8 01       	movw	r30, r16
 1ae:	ec 0f       	add	r30, r28
 1b0:	fd 1f       	adc	r31, r29
 1b2:	80 81       	ld	r24, Z
 1b4:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_data>
		i++;
 1b8:	21 96       	adiw	r28, 0x01	; 1
 1ba:	f8 cf       	rjmp	.-16     	; 0x1ac <lcd_string+0x6>

000001bc <main>:

	
int main(void)
	{
		
		DDRB=0xFF;
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	87 bb       	out	0x17, r24	; 23
		DDRD=0xFB;
 1c0:	8b ef       	ldi	r24, 0xFB	; 251
 1c2:	81 bb       	out	0x11, r24	; 17
 1c4:	83 ed       	ldi	r24, 0xD3	; 211
 1c6:	90 e3       	ldi	r25, 0x30	; 48
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0xc>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0x12>
 1ce:	00 00       	nop
		_delay_ms(50);
		GICR|=(1<<INT0);
 1d0:	8b b7       	in	r24, 0x3b	; 59
 1d2:	80 64       	ori	r24, 0x40	; 64
 1d4:	8b bf       	out	0x3b, r24	; 59
		MCUCR|=(1<<ISC00);
 1d6:	85 b7       	in	r24, 0x35	; 53
 1d8:	81 60       	ori	r24, 0x01	; 1
 1da:	85 bf       	out	0x35, r24	; 53
		int16_t COUNTA=0;
		char SHOWA [16];
		
		lcd_cmd(0x02);
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_cmd>
		lcd_cmd(0x28);
 1e2:	88 e2       	ldi	r24, 0x28	; 40
 1e4:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_cmd>
		lcd_cmd(0x0C);
 1e8:	8c e0       	ldi	r24, 0x0C	; 12
 1ea:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_cmd>
		lcd_cmd(0x06);
 1ee:	86 e0       	ldi	r24, 0x06	; 6
 1f0:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_cmd>
		sei();
 1f4:	78 94       	sei
		while(1)
		{
			PORTD|=(1<<PIND0);
 1f6:	82 b3       	in	r24, 0x12	; 18
 1f8:	81 60       	ori	r24, 0x01	; 1
 1fa:	82 bb       	out	0x12, r24	; 18
 1fc:	85 ea       	ldi	r24, 0xA5	; 165
 1fe:	9e e0       	ldi	r25, 0x0E	; 14
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <__EEPROM_REGION_LENGTH__>
 204:	00 c0       	rjmp	.+0      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
 206:	00 00       	nop
			_delay_ms(15);
			PORTD &=~(1<<PIND0);
 208:	82 b3       	in	r24, 0x12	; 18
 20a:	8e 7f       	andi	r24, 0xFE	; 254
 20c:	82 bb       	out	0x12, r24	; 18
 20e:	85 ea       	ldi	r24, 0xA5	; 165
 210:	9e e0       	ldi	r25, 0x0E	; 14
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
 216:	00 c0       	rjmp	.+0      	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 218:	00 00       	nop
			_delay_ms(15);
			
			COUNTA=pulse/58;
 21a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <pulse>
 21e:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <pulse+0x1>
			
			lcd_cmd(0x80);
 222:	80 e8       	ldi	r24, 0x80	; 128
 224:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_cmd>
			lcd_string("ultrasonic sensor");
 228:	80 e6       	ldi	r24, 0x60	; 96
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_string>

00000230 <_exit>:
 230:	f8 94       	cli

00000232 <__stop_program>:
 232:	ff cf       	rjmp	.-2      	; 0x232 <__stop_program>
